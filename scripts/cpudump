#!/bin/bash

adb root >/dev/null

color_black_on="printf \033[30m"
color_red_on="printf \033[31m"
color_green_on="printf \033[32m"
color_yellow_on="printf \033[33m"
color_blue_on="printf \033[34m"
color_purple_on="printf \033[35m"
color_cyan_on="printf \033[36m"
color_white_on="printf \033[37m"

color_off="printf \033[0m"


#######################################################################

little_str="小核"
big_str="大核"
super_str="超核"

cores=$(adb shell "ls -d /sys/devices/system/cpu/cpu[0-9]*" | wc -l)
little=0
big=$cores
super=$cores

i=0
node[i]=0

next=$(adb shell cat /sys/devices/system/cpu/cpu0/topology/core_siblings_list)
next=${next#*-}
next=$((next + 1))
while [ $next -lt $cores ]
do
	let i++
	node[i]=$next
	next=$(adb shell cat /sys/devices/system/cpu/cpu${node[$i]}/topology/core_siblings_list)
	if [ $? -ne 0 ] ;then
		$color_red_on
		echo "The core ${node[$i]} is offline, maybe the phone is too hot,"
		echo "But we need the core info, so try it later!"
		$color_off
		exit 1
	fi
	next=${next#*-}
	next=$((next + 1))
done

nr=${#node[*]}
for((i=0; i < nr; i++))
do
	for((j=nr-1; j > i; j--))
	do
		cur1=$(adb shell cat "/sys/devices/system/cpu/cpu${node[$j]}/cpufreq/cpuinfo_max_freq")
		cur2=$(adb shell cat "/sys/devices/system/cpu/cpu${node[$((j-1))]}/cpufreq/cpuinfo_max_freq")
		if [ "$cur1" -lt "$cur2" ] ; then
			tmp=${node[$j]}
			node[$j]=${node[$((j-1))]}
			node[$((j-1))]=$tmp
		fi
	done
done

little=${node[0]}
if [ $nr -eq 1 ] ;then
	little_str="通核"
elif [ $nr -ge 2 ] ;then
	big=${node[1]}
	if [ $nr -ge 3 ] ;then
		super=${node[2]}
	fi
fi


#-----------------------------------------------------


little_hard_min=$(adb shell "read line < /sys/devices/system/cpu/cpu${little}/cpufreq/cpuinfo_min_freq; echo \$line")
little_hard_min=$(($little_hard_min/1000))
little_hard_max=$(adb shell "read line < /sys/devices/system/cpu/cpu${little}/cpufreq/cpuinfo_max_freq; echo \$line")
little_hard_max=$(($little_hard_max/1000))

if [  $big -lt $cores ]; then
big_hard_min=$(adb shell "read line < /sys/devices/system/cpu/cpu${big}/cpufreq/cpuinfo_min_freq; echo \$line")
big_hard_min=$(($big_hard_min/1000))
big_hard_max=$(adb shell "read line < /sys/devices/system/cpu/cpu${big}/cpufreq/cpuinfo_max_freq; echo \$line")
big_hard_max=$(($big_hard_max/1000))
fi

if [  $super -lt $cores ]; then
super_hard_min=$(adb shell "read line < /sys/devices/system/cpu/cpu${super}/cpufreq/cpuinfo_min_freq; echo \$line")
super_hard_min=$(($super_hard_min/1000))
super_hard_max=$(adb shell "read line < /sys/devices/system/cpu/cpu${super}/cpufreq/cpuinfo_max_freq; echo \$line")
super_hard_max=$(($super_hard_max/1000))
fi

#---------------------------------------------------------------------

thermal_files_cmd="
count=\`ls -d /sys/class/thermal/thermal_zone* | wc -w\`
let count--
for i in \`seq 0 \$count\`
do
	dir=/sys/class/thermal/thermal_zone\$i
	read device < \$dir/type
	if [   \$device = xo_therm \
		-o \$device = quiet_therm \
		-o \$device = battery \
		-o \$device = cpuss-0-usr \
		-o \$device = cpuss-1-usr \
		-o \$device = camera-usr \
		]; then
		echo \$device
		echo \$dir/temp
	fi
done
"
thermal_files=($(adb shell "$thermal_files_cmd"))

for((i=0; i < ${#thermal_files[*]}; i++))
do
	device=${thermal_files[$i]}
	let i++
	if [ $device = cpuss-0-usr ]; then
		temp_file_little=${thermal_files[$i]}
	elif [ $device = cpuss-1-usr ]; then
		temp_file_big=${thermal_files[$i]}
	elif [ $device = camera-usr ]; then
		temp_file_camera=${thermal_files[$i]}
	elif [ $device = xo_therm ]; then
		temp_file_xo_therm=${thermal_files[$i]}
	elif [ $device = quiet_therm ]; then
		temp_file_quiet_therm=${thermal_files[$i]}
	elif [ $device = battery ]; then
		temp_file_battery=${thermal_files[$i]}
	else
		echo "Error, pls check the code"
	fi
done


####################################################################
#******************************************************************#
####################################################################

while true
do

#################### while START ###################### 

# perf_min_all=$(adb shell "read line < /sys/module/msm_performance/parameters/cpu_min_freq; echo \$line")
perf_min_all=$(adb shell "read line < /sys/kernel/msm_performance/parameters/cpu_min_freq; echo \$line")
# perf_max_all=$(adb shell "read line < /sys/module/msm_performance/parameters/cpu_max_freq; echo \$line")
perf_max_all=$(adb shell "read line < /sys/kernel/msm_performance/parameters/cpu_max_freq; echo \$line")

little_perf_min=$(awk -F"[ :]" "{print \$$(( (little + 1)*2 ))}" <<< "$perf_min_all")
little_perf_min=$(($little_perf_min/1000))

little_perf_max=$(awk -F"[ :]" "{print \$$(( (little + 1)*2 ))}" <<< "$perf_max_all")
little_perf_max=$(($little_perf_max/1000))
little_perf_max=$(($little_perf_max < 9999 ? $little_perf_max : 9999))

if [  $big -lt $cores ]; then
big_perf_min=$(awk -F"[ :]" "{print \$$(( (big + 1)*2 ))}" <<< "$perf_min_all")
big_perf_min=$(($big_perf_min/1000))

big_perf_max=$(awk -F"[ :]" "{print \$$(( (big + 1)*2 ))}" <<< "$perf_max_all")
big_perf_max=$(($big_perf_max/1000))
big_perf_max=$(($big_perf_max < 9999 ? $big_perf_max : 9999))
fi

if [  $super -lt $cores ]; then
super_perf_min=$(awk -F"[ :]" "{print \$$(( (super + 1)*2 ))}" <<< "$perf_min_all")
super_perf_min=$(($super_perf_min/1000))

super_perf_max=$(awk -F"[ :]" "{print \$$(( (super + 1)*2 ))}" <<< "$perf_max_all")
super_perf_max=$(($super_perf_max/1000))
super_perf_max=$(($super_perf_max < 9999 ? $super_perf_max : 9999))
fi

#---------------------------------------------------------------------

little_user_min=$(adb shell "read line < /sys/devices/system/cpu/cpu${little}/cpufreq/scaling_min_freq; echo \$line")
little_user_min=$(($little_user_min/1000))

little_user_max=$(adb shell "read line < /sys/devices/system/cpu/cpu${little}/cpufreq/scaling_max_freq; echo \$line")
little_user_max=$(($little_user_max/1000))

if [  $big -lt $cores ]; then
big_user_min=$(adb shell "read line < /sys/devices/system/cpu/cpu${big}/cpufreq/scaling_min_freq; echo \$line")
big_user_min=$(($big_user_min/1000))

big_user_max=$(adb shell "read line < /sys/devices/system/cpu/cpu${big}/cpufreq/scaling_max_freq; echo \$line")
big_user_max=$(($big_user_max/1000))
fi

if [  $super -lt $cores ]; then
super_user_min=$(adb shell "read line < /sys/devices/system/cpu/cpu${super}/cpufreq/scaling_min_freq; echo \$line")
super_user_min=$(($super_user_min/1000))

super_user_max=$(adb shell "read line < /sys/devices/system/cpu/cpu${super}/cpufreq/scaling_max_freq; echo \$line")
super_user_max=$(($super_user_max/1000))
fi

#---------------------------------------------------------------------

little_cur_freq=$(adb shell "read line < /sys/devices/system/cpu/cpu${little}/cpufreq/cpuinfo_cur_freq; echo \$line")
little_cur_freq=$(($little_cur_freq/1000))

if [  $big -lt $cores ]; then
big_cur_freq=$(adb shell "read line < /sys/devices/system/cpu/cpu${big}/cpufreq/cpuinfo_cur_freq; echo \$line")
if [ "$big_cur_freq" = "<unknown>" ] ;then
	big_cur_freq=0
fi
big_cur_freq=$(($big_cur_freq/1000))
fi

if [  $super -lt $cores ]; then
super_cur_freq=$(adb shell "read line < /sys/devices/system/cpu/cpu${super}/cpufreq/cpuinfo_cur_freq; echo \$line")
if [ $super_cur_freq = "<unknown>" ] ;then
	super_cur_freq=0
fi
super_cur_freq=$(($super_cur_freq/1000))
fi

#---------------------------------------------------------------------

temp_little=$(adb shell "read line < $temp_file_little; echo \$line")
temp_little=$(echo "scale=1;$temp_little/1000" | bc)

temp_big=$(adb shell "read line < $temp_file_big; echo \$line")
temp_big=$(echo "scale=1;$temp_big/1000" | bc)

temp_camera=$(adb shell "read line < $temp_file_camera; echo \$line")
temp_camera=$(echo "scale=1;$temp_camera/1000" | bc)

temp_xo_therm=$(adb shell "read line < $temp_file_xo_therm; echo \$line")
temp_xo_therm=$(echo "scale=1;$temp_xo_therm/1000" | bc)

temp_quiet_therm=$(adb shell "read line < $temp_file_quiet_therm; echo \$line")
temp_quiet_therm=$(echo "scale=1;$temp_quiet_therm/1000" | bc)

temp_battery=$(adb shell "read line < $temp_file_battery; echo \$line")
temp_battery=$(echo "scale=1;$temp_battery/1000" | bc)


#---------------------------------------------------------------------

onlines=$(adb shell "cat /sys/devices/system/cpu/cpu*/online")
onlines=$(echo $onlines)
isolates=$(adb shell "cat /sys/devices/system/cpu/cpu*/isolate")
isolates=$(echo $isolates)


###################################################################################


date

echo "============================================================"
printf "CPUFreq and Thermal info dump           %20s\n" "i:$((k++))"

order=$(eval echo {0..$((cores - 1))})
printf "cores   : %s\n"  "$order"
printf "online  : %s\n" "$onlines"
printf "isolate : %s\n" "$isolates"

echo "-----------------------------------------------------------"

printf "         freq_range    perf_limit   final_limit  freq  temp \n"

printf "%2s%d-%d (%3d--%4d):  [%4d--%4d] [%4d--%4d]  %4d  %3.1f\n" \
		$little_str \
        $little $((big   - 1)) \
        $little_hard_min $little_hard_max \
        $little_perf_min $little_perf_max \
        $little_user_min $little_user_max \
        $little_cur_freq \
        $temp_little

if [  $big -lt $cores ]; then
printf "%2s%d-%d (%3d--%4d):  [%4d--%4d] [%4d--%4d]  %4d  %3.1f\n" \
		$big_str \
        $big    $((super - 1)) \
        $big_hard_min $big_hard_max \
        $big_perf_min $big_perf_max \
        $big_user_min $big_user_max \
        $big_cur_freq \
        $temp_big
fi

if [  $super -lt $cores ]; then
printf "%2s%d-%d (%3d--%4d):  [%4d--%4d] [%4d--%4d]  %4d  %3.1f\n" \
		$super_str \
        $super  $((cores - 1)) \
        $super_hard_min $super_hard_max \
        $super_perf_min $super_perf_max \
        $super_user_min $super_user_max \
        $super_cur_freq \
        $temp_big
fi

echo "-----------------------------------------------------------"

printf "%-18s %5s ℃\n"  "Device"       "Temp"
printf "%-18s %5.1f\n"   "camera:"      $temp_camera
printf "%-18s %5.1f\n"   "board_hot:"   $temp_xo_therm
printf "%-18s %5.1f\n"   "board_cold:"  $temp_quiet_therm
printf "%-18s %5.1f\n"   "battery:"     $temp_battery

printf "\n"


##################### while END #########################

done


